use std::collections::HashSet;
use num_bigint::BigUint;

enum Point {
    FieldPoint(BigUint, BigUint),
    PointAtInfinity,
}

struct Curve{
    a: u8, //first curve coefficient
    b: u8, //second curve coefficent 
    //TODO - curves over general fields
}

impl Curve {
    fn test(p: Point) -> bool { //tests if Point is on the curve
        todo!("Curve is not yet implemented");
    }
}

struct Pol {
    degree: u32,
    coefficients: HashSet<u32> //since we're only working over binary fields, storing the non-zero coefficient's indices is enough
}

impl Pol {
    fn new(degree: u32, coefficients: HashSet<u32>) -> Self {
        Self {
            degree,
            coefficients,
        }
    }
    //TODO - polynomials over general Fields
}

struct Koblitz {
    m: u32, // extension degree
    f: Pol, // reduction polynomial of degree m
    e: Curve, // curve
    n: BigUint, // base point order
    h: u32, // cofactor
    p: Point, // base point
}

impl Koblitz {
    fn new(choice: u8) -> Self {
        //choice 1-5 returns the corresponding nist recommended kolitz curve. Other values are currently not permitted
        match choice {
            1 => Koblitz::get_nist_1(),
            2 => Koblitz::get_nist_2(),
            3 => Koblitz::get_nist_3(),
            4 => Koblitz::get_nist_4(),
            5 => Koblitz::get_nist_5(),
            _ => todo!("Koblitz curve other than the NIST recommended ones are not yet implemented")
        }
    }
    fn get_nist_1() -> Self {
        const KOBLITZ_NIST_1_N: &[u8] = &[0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x08, 0xA2, 0xE0, 0xCC, 0x0D, 0x99, 0xF8, 0xA5, 0xEF];
        const KOBLITZ_NIST_1_X: &[u8] = &[0x00, 0x00, 0x00, 0x02, 0xFE, 0x13, 0xC0, 0x53, 0x7B, 0xBC, 0x11, 0xAC, 0xAA, 0x07, 0xD7, 0x93, 0xDE, 0x4E, 0x6D, 0x5E, 0x5C, 0x94, 0xEE, 0xE8];
        const KOBLITZ_NIST_1_Y: &[u8] = &[0x00, 0x00, 0x00, 0x02, 0x89, 0x07, 0x0F, 0xB0, 0x5D, 0x38, 0xFF, 0x58, 0x32, 0x1F, 0x2E, 0x80, 0x05, 0x36, 0xD5, 0x38, 0xCC, 0xDA, 0xA3, 0xD9];
        let nist_1: Koblitz = Koblitz {
            m: 163,
            f: Pol {
                degree: 163, 
                coefficients: HashSet::from([0, 3, 6, 7, 163])
            },
            e: Curve {
                a: 1,
                b: 1,
            },
            n: BigUint::from_bytes_be(KOBLITZ_NIST_1_N),
            h: 2,
            p: Point::FieldPoint(BigUint::from_bytes_be(KOBLITZ_NIST_1_X), BigUint::from_bytes_be(KOBLITZ_NIST_1_Y)),
        };
        return nist_1;
    }

    fn get_nist_2() -> Self {
        const KOBLITZ_NIST_2_N: &[u8] = &[0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x9D, 0x5B, 0xB9, 0x15, 0xBC, 0xD4, 0x6E, 0xFB, 0x1A, 0xD5, 0xF1, 0x73, 0xAB, 0xDF];
        const KOBLITZ_NIST_2_X: &[u8] = &[0x00, 0x00, 0x01, 0x72, 0x32, 0xBA, 0x85, 0x3A, 0x7E, 0x73, 0x1A, 0xF1, 0x29, 0xF2, 0x2F, 0xF4, 0x14, 0x95, 0x63, 0xA4, 0x19, 0xC2, 0x6B, 0xF5, 0x0A, 0x4C, 0x9D, 0x6E, 0xEF, 0xAD, 0x61, 0x26];
        const KOBLITZ_NIST_2_Y: &[u8] = &[0x00, 0x00, 0x01, 0xDB, 0x53, 0x7D, 0xEC, 0xE8, 0x19, 0xB7, 0xF7, 0x0F, 0x55, 0x5A, 0x67, 0xC4, 0x27, 0xA8, 0xCD, 0x9B, 0xF1, 0x8A, 0xEB, 0x9B, 0x56, 0xE0, 0xC1, 0x10, 0x56, 0xFA, 0xE6, 0xA3];
        let nist_2: Koblitz = Koblitz {
            m: 233,
            f: Pol {
                degree: 233, 
                coefficients: HashSet::from([0, 74, 233])
            },
            e: Curve {
                a: 0,
                b: 1,
            },
            n: BigUint::from_bytes_be(KOBLITZ_NIST_2_N),
            h: 4,
            p: Point::FieldPoint(BigUint::from_bytes_be(KOBLITZ_NIST_2_X), BigUint::from_bytes_be(KOBLITZ_NIST_2_Y)),
        };
        return nist_2;
    }

    fn get_nist_3() -> Self {
        const KOBLITZ_NIST_3_N: &[u8] = &[0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE9, 0xAE, 0x2E, 0xD0, 0x75, 0x77, 0x26, 0x5D, 0xFF, 0x7F, 0x94, 0x45, 0x1E, 0x06, 0x1E, 0x16, 0x3C, 0x61];
        const KOBLITZ_NIST_3_X: &[u8] = &[0x05, 0x03, 0x21, 0x3F, 0x78, 0xCA, 0x44, 0x88, 0x3F, 0x1A, 0x3B, 0x81, 0x62, 0xF1, 0x88, 0xE5, 0x53, 0xCD, 0x26, 0x5F, 0x23, 0xC1, 0x56, 0x7A, 0x16, 0x87, 0x69, 0x13, 0xB0, 0xC2, 0xAC, 0x24, 0x58, 0x49, 0x28, 0x36];
        const KOBLITZ_NIST_3_Y: &[u8] = &[0x01, 0xCC, 0xDA, 0x38, 0x0F, 0x1C, 0x9E, 0x31, 0x8D, 0x90, 0xF9, 0x5D, 0x07, 0xE5, 0x42, 0x6F, 0xE8, 0x7E, 0x45, 0xC0, 0xE8, 0x18, 0x46, 0x98, 0xE4, 0x59, 0x62, 0x36, 0x4E, 0x34, 0x11, 0x61, 0x77, 0xDD, 0x22, 0x59];
        let nist_3: Koblitz = Koblitz {
            m: 283,
            f: Pol {
                degree: 283, 
                coefficients: HashSet::from([0, 5, 7, 12, 283])
            },
            e: Curve {
                a: 0,
                b: 1,
            },
            n: BigUint::from_bytes_be(KOBLITZ_NIST_3_N),
            h: 4,
            p: Point::FieldPoint(BigUint::from_bytes_be(KOBLITZ_NIST_3_X), BigUint::from_bytes_be(KOBLITZ_NIST_3_Y)),
        };
        return nist_3;
    }

    fn get_nist_4() -> Self {
        const KOBLITZ_NIST_4_N: &[u8] = &[0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x5F, 0x83, 0xB2, 0xD4, 0xEA, 0x20, 0x40, 0x0E, 0xC4, 0x55, 0x7D, 0x5E, 0xD3, 0xE3, 0xE7, 0xCA, 0x5B, 0x4B, 0x5C, 0x83, 0xB8, 0xE0, 0x1E, 0x5F, 0xCF];
        const KOBLITZ_NIST_4_X: &[u8] = &[0x00, 0x60, 0xF0, 0x5F, 0x65, 0x8F, 0x49, 0xC1, 0xAD, 0x3A, 0xB1, 0x89, 0x0F, 0x71, 0x84, 0x21, 0x0E, 0xFD, 0x09, 0x87, 0xE3, 0x07, 0xC8, 0x4C, 0x27, 0xAC, 0xCF, 0xB8, 0xF9, 0xF6, 0x7C, 0xC2, 0xC4, 0x60, 0x18, 0x9E, 0xB5, 0xAA, 0xAA, 0x62, 0xEE, 0x22, 0x2E, 0xB1, 0xB3, 0x55, 0x40, 0xCF, 0xE9, 0x02, 0x37, 0x46];
        const KOBLITZ_NIST_4_Y: &[u8] = &[0x01, 0xE3, 0x69, 0x05, 0x0B, 0x7C, 0x4E, 0x42, 0xAC, 0xBA, 0x1D, 0xAC, 0xBF, 0x04, 0x29, 0x9C, 0x34, 0x60, 0x78, 0x2F, 0x91, 0x8E, 0xA4, 0x27, 0xE6, 0x32, 0x51, 0x65, 0xE9, 0xEA, 0x10, 0xE3, 0xDA, 0x5F, 0x6C, 0x42, 0xE9, 0xC5, 0x52, 0x15, 0xAA, 0x9C, 0xA2, 0x7A, 0x58, 0x63, 0xEC, 0x48, 0xD8, 0xE0, 0x28, 0x6B];
        let nist_4: Koblitz = Koblitz {
            m: 409,
            f: Pol {
                degree: 409, 
                coefficients: HashSet::from([0, 87, 409])
            },
            e: Curve {
                a: 0,
                b: 1,
            },
            n: BigUint::from_bytes_be(KOBLITZ_NIST_4_N),
            h: 4,
            p: Point::FieldPoint(BigUint::from_bytes_be(KOBLITZ_NIST_4_X), BigUint::from_bytes_be(KOBLITZ_NIST_4_Y)),
        };
        return nist_4;
    }

    fn get_nist_5() -> Self {
        const KOBLITZ_NIST_5_N: &[u8] = &[0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x18, 0x50, 0xE1, 0xF1, 0x9A, 0x63, 0xE4, 0xB3, 0x91, 0xA8, 0xDB, 0x91, 0x7F, 0x41, 0x38, 0xB6, 0x30, 0xD8, 0x4B, 0xE5, 0xD6, 0x39, 0x38, 0x1E, 0x91, 0xDE, 0xB4, 0x5C, 0xFE, 0x77, 0x8F, 0x63, 0x7C, 0x10, 0x01];
        const KOBLITZ_NIST_5_X: &[u8] = &[0x02, 0x6E, 0xB7, 0xA8, 0x59, 0x92, 0x3F, 0xBC, 0x82, 0x18, 0x96, 0x31, 0xF8, 0x10, 0x3F, 0xE4, 0xAC, 0x9C, 0xA2, 0x97, 0x00, 0x12, 0xD5, 0xD4, 0x60, 0x24, 0x80, 0x48, 0x01, 0x84, 0x1C, 0xA4, 0x43, 0x70, 0x95, 0x84, 0x93, 0xB2, 0x05, 0xE6, 0x47, 0xDA, 0x30, 0x4D, 0xB4, 0xCE, 0xB0, 0x8C, 0xBB, 0xD1, 0xBA, 0x39, 0x49, 0x47, 0x76, 0xFB, 0x98, 0x8B, 0x47, 0x17, 0x4D, 0xCA, 0x88, 0xC7, 0xE2, 0x94, 0x52, 0x83, 0xA0, 0x1C, 0x89, 0x72];
        const KOBLITZ_NIST_5_Y: &[u8] = &[0x03, 0x49, 0xDC, 0x80, 0x7F, 0x4F, 0xBF, 0x37, 0x4F, 0x4A, 0xEA, 0xDE, 0x3B, 0xCA, 0x95, 0x31, 0x4D, 0xD5, 0x8C, 0xEC, 0x9F, 0x30, 0x7A, 0x54, 0xFF, 0xC6, 0x1E, 0xFC, 0x00, 0x6D, 0x8A, 0x2C, 0x9D, 0x49, 0x79, 0xC0, 0xAC, 0x44, 0xAE, 0xA7, 0x4F, 0xBE, 0xBB, 0xB9, 0xF7, 0x72, 0xAE, 0xDC, 0xB6, 0x20, 0xB0, 0x1A, 0x7B, 0xA7, 0xAF, 0x1B, 0x32, 0x04, 0x30, 0xC8, 0x59, 0x19, 0x84, 0xF6, 0x01, 0xCD, 0x4C, 0x14, 0x3E, 0xF1, 0xC7, 0xA3];
        let nist_5: Koblitz = Koblitz {
            m: 571,
            f: Pol {
                degree: 571, 
                coefficients: HashSet::from([0, 2, 5, 19, 571])
            },
            e: Curve {
                a: 0,
                b: 1,
            },
            n: BigUint::from_bytes_be(KOBLITZ_NIST_5_N),
            h: 4,
            p: Point::FieldPoint(BigUint::from_bytes_be(KOBLITZ_NIST_5_X), BigUint::from_bytes_be(KOBLITZ_NIST_5_Y)),
        };
        return nist_5;
    }
}

fn main(){

}